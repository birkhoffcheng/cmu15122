#use <conio>
#use <util>

typedef struct bloom_filter* bloom_t;
struct bloom_filter {
	int[] data;
	int limit;
};

int hash1(string s) {
	if (string_length(s) < 1) return 0;
	else if (string_length(s) == 1)	return char_ord(string_charat(s, 0));
	return hash1(string_sub(s,0,string_length(s)-1)) * 31 + char_ord(string_charat(s, string_length(s)-1));
}

int hash2(string s) {
	int out = 0;
	for (int i = 0; i < string_length(s); i++) {
		out = (out * 0xE582E1 + 0xD4A1A9) % 0xF61E8F + char_ord(string_charat(s, i));
	}
	return out;
}

int rot(int in) {
	int tmp = in & 0xFF;
	in = (in & 0x7FFFFFFF) >> 8;
	return in | (tmp << 24);
}

int hash3(string s) {
	int out = 0;
	for (int i = 0; i < string_length(s); i++) { 
		out ^= char_ord(string_charat(s, i));
		out ^= char_ord(string_charat(s, i)) << 8;
		out ^= char_ord(string_charat(s, i)) << 16;
		out ^= char_ord(string_charat(s, i)) << 24;
	}
	return out;
}

bool get_bit(int[] A, int i)
//@requires 0 <= i && i/32 < \length(A);
{	// Adapted from midterm
	int index_of_int = i / 32;
	int index_of_bit = i % 32;
	int out = A[index_of_int] >> (31 - index_of_bit);
	out &= 1;
	return out == 1;
}

void set_bit(int[] A, int i)
//@requires 0 <= i && i/32 < \length(A);
//@ensures get_bit(A, i);
{
	int index_of_int = i / 32;
	int index_of_bit = i % 32;
	int mask = 1;
	mask = mask << (31 - index_of_bit);
	A[index_of_int] |= mask;
}

bool expected_length(int[] arr, int length)
//@requires \length(arr) == length;
{return true;}

bool is_bloom(bloom_t bloom) {
	return bloom != NULL && bloom->limit > 0 && expected_length(bloom->data, (bloom->limit + 31) / 32);
}

bloom_t bloom_new(int limit)
//@ensures is_bloom(\result);
{
	bloom_t new = alloc(struct bloom_filter);
	new->limit = limit;
	new->data = alloc_array(int, (limit + 31) / 32);
	return new;
}

void bloom_add(bloom_t bloom, string s)
//@requires is_bloom(bloom);
//@ensures is_bloom(bloom);
{
	int hash_index;
	hash_index = abs(hash1(s) % bloom->limit);
	set_bit(bloom->data, hash_index);
	hash_index = abs(hash2(s) % bloom->limit);
	set_bit(bloom->data, hash_index);
	hash_index = abs(hash3(s) % bloom->limit);
	set_bit(bloom->data, hash_index);
}

bool bloom_contains(bloom_t bloom, string s)
//@requires is_bloom(bloom);
//@ensures is_bloom(bloom);
{
	int hash_index1 = abs(hash1(s) % bloom->limit);
	int hash_index2 = abs(hash2(s) % bloom->limit);
	int hash_index3 = abs(hash3(s) % bloom->limit);
	return get_bit(bloom->data, hash_index1) && get_bit(bloom->data, hash_index2) && get_bit(bloom->data, hash_index3);
}
/*
int main() {
	int int1 = hash3("iITGkBZmqJSjp2I") % 65536;
	int int2 = hash3("iITGkBZmqJSjp2J") % 65536;
	printint(int1); print("\t"); println("iITGkBZmqJSjp2I");
	printint(int2); print("\t"); println("iITGkBZmqJSjp2J");
	return 0;
}
*/
