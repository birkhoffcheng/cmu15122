#use <conio>
#use <util>

int hash1(string s) {	// Mult31 from lab
	if (string_length(s) <= 1)	return char_ord(string_charat(s, 0));
	return hash1(string_sub(s,0,string_length(s)-1)) * 31 + char_ord(string_charat(s, string_length(s)-1));
}

int hash2(string s) {	// LCG from lab
	int out = 0;
	for (int i = 0; i < string_length(s); i++) {
		out = (out * 0xE582E1 + 0xD4A1A9) % 0xF61E8F + char_ord(string_charat(s, i));
	}
	return out;
}

int rot(int in) {
	int tmp = in & 0xF;
	in = in >> 4 & 0x7FFFFFFF;
	return in | tmp << 28;
}

int hash3(string s) {	// Hash function with avalanche effect, adapted from the Internet.
	int out = 0;
	for (int i = 0; i < string_length(s); i++) { 
		out ^= char_ord(string_charat(s, i));
		out = rot(out);
	}
	return out;
}

bool get_bit(int[] A, int i)
//@requires 0 <= i && i/32 < \length(A);
{	// Adapted from midterm
	int index_of_int = i / 32;
	int index_of_bit = i % 32;
	int out = A[index_of_int] >> (31 - index_of_bit);
	if (index_of_bit == 0)
		out &= 0x1;
	return out == 1;
}

void set_bit(int[] A, int i)
//@requires 0 <= i && i/32 < \length(A);
//@ensures get_bit(A, i);
{
	int index_of_int = i / 32;
	int index_of_bit = i % 32;
	int mask = 1;
	for (int a = 0; a < 31 - index_of_bit; a++)
		mask = mask << 1;
	A[index_of_int] |= mask;
}

int main() {
	int[] A = alloc_array(int, 100);
	set_bit(A, 98);
	printbool(get_bit(A, 98)); println("");
	return 0;
}
