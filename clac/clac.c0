/*
 * Clac, stack-based calculator language
 *
 * 15-122 Principles of Imperative Computation
 */

#use <string>
#use <parse>
#use <conio>
#use <args>
#use <util>

/* From the perspective of the clac-main.c0 file, state_t is an
 * abstract type. (typedef ____* state_t) This file contains the
 * implementation of the state_t type. You will add new fields to this
 * struct when you do task 4. */
struct state_header {
  /* Nothing in here initially */
};
typedef struct state_header* state_t;
state_t init_state()
//@ensures \result != NULL;
{
  return alloc(struct state_header);
}

/* Main clac interpreter. */
/* Return true: clac top-level interpreter will expect more input */
/* Return false: clac top-level interpreter will exit */
bool eval(queue_t Q, stack_t S, state_t ST)
//@requires Q != NULL && S != NULL && ST != NULL;
//@ensures \result == false || queue_empty(Q);
{
  while (!queue_empty(Q)) {
    string tok = "";
    if (Q != NULL)
      tok = deq(Q); /* Is this dequeue safe? */
    else
      return true;
    // Uncommenting these lines might help with debugging:
    // print("Read: "); print(tok); print("\n");
    if (string_equal(tok, "print")) {
      if (stack_empty(S)) {
        println("Stack is empty!");
      }
      else {
        int x = pop(S); /* This line is unsafe and must be fixed! */
        printint(x); print("\n");
      }
    }
    
    else if (string_equal(tok, "quit")) {
      return false;
    }
    
    else if (string_equal(tok, "+")) {
      int added1 = 0;
      if (stack_empty(S)) {
        println("Error: not enough elements on stack");
        return false;
      }
      else {
        added1 = pop(S);
      }
      if (stack_empty(S)) {
        println("Error: not enough elements on stack");
        return false;
      }
      else {
        int added2 = pop(S);
        if (added1 <= int_max() - added2) {
          int out = added1 + added2;
          push(S, out);
          printint(out); print("\n");
        }
        else
          println("Int too large!");
      }
    }
    else if (string_equal(tok, "-")) {
      int subtracted = 0;
      if (stack_empty(S)) {
        println("Error: not enough elements on stack");
        return false;
      }
      else {
        subtracted = pop(S);
      }
      if (stack_empty(S)) {
        println("Error: not enough elements on stack");
        return false;
      }
      else {
        int ttl = pop(S);
        int out = ttl - subtracted;
        push(S, out);
        printint(out); print("\n");
      }
    }
    else if (string_equal(tok, "*")) {
      int mult1 = 0;
      if (stack_empty(S)) {
        println("Error: not enough elements on stack");
        return false;
      }
      else {
        mult1 = pop(S);
      }
      if (stack_empty(S)) {
        println("Error: not enough elements on stack");
        return false;
      }
      else {
        int mult2 = pop(S);
        if (mult1 < int_max() / mult2) {
          int out = mult1 * mult2;
          push(S, out);
          printint(out); print("\n");
        }
        else
          println("Int too large!");
      }
    }
    else if (string_equal(tok, "**")) {
      int power = 0;
      if (stack_empty(S)) {
        println("Error: not enough elements on stack");
        return false;
      }
      else {
        power = pop(S);
        if (power < 0) {
          println("Error: power cannot be less than zero!");
          return false;
        }
      }
      if (stack_empty(S)) {
        println("Error: not enough elements on stack");
        return false;
      }
      else {
        int base = pop(S);
        int out = 1;
        for (int i = 0; i < power; i++)
          if (out <= int_max() / base)
            out *= base;
          else {
            println("Int too large!");
            i = power;
          }
        push(S, out);
        printint(out); print("\n");
      }
    }
    else if (string_equal(tok, "/")) {
      int divident = 0;
      if (stack_empty(S)) {
        println("Error: not enough elements on stack");
        return false;
      }
      else {
        divident = pop(S);
        if (divident == 0) {
          println("Error: division by zero");
          return false;
        }
      }
      if (stack_empty(S)) {
        println("Error: not enough elements on stack");
        return false;
      }
      else {
        int divided = pop(S);
        int out = divided / divident;
        push(S, out);
        printint(out); print("\n");
      }
    }
    else if (string_equal(tok, "%")) {
      int divident = 0;
      if (stack_empty(S)) {
        println("Error: not enough elements on stack");
        return false;
      }
      else {
        divident = pop(S);
        if (divident == 0) {
          println("Error: division by zero");
          return false;
        }
      }
      if (stack_empty(S)) {
        println("Error: not enough elements on stack");
        return false;
      }
      else {
        int divided = pop(S);
        int out = divided % divident;
        push(S, out);
        printint(out); print("\n");
      }
    }
    else if (string_equal(tok, "<")) {
      int y = 0;
      if (stack_empty(S)) {
        println("Error: not enough elements on stack");
        return false;
      }
      else {
        y = pop(S);
      }
      if (stack_empty(S)) {
        println("Error: not enough elements on stack");
        return false;
      }
      else {
        int x = pop(S);
        int out = 0;
        if (x < y)
          out = 1;
        else
          out = 0;
        push(S, out);
        printint(out); print("\n");
      }
    }
    else {
      /* Not defined as an operation name, should be an int */
      int* p = parse_int(tok, 10);
      if (p == NULL) { /* not an int */
        /* call error(msg) which prints msg and aborts */
        error(string_join("undefined token ", tok));
      }
      push(S, *p);
    }
  }

  /* When you return "true", don't pop anything off the stack! When we
   * grade your function, we'll check that the stack contains the
   * integers we expect. */
  return true;
}
