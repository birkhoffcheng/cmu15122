#use <conio>
#use <util>

bool even(void* x)
//@requires x == NULL || \hastag(int*, x);
{
	return x != NULL && (*((int*)x)) >= 0 && (*((int*)x)) % 2 == 0;
}

bool odd(void* x)
//@requires x == NULL || \hastag(int*, x);
{
	return x == NULL || ((*((int*)x)) > 0 && (*((int*)x)) % 2 == 1);
}

bool incr(void* x)
//@requires x == NULL || \hastag(int*, x);
{
	if (x != NULL) {
		int* i = (int*)x;
		(*i)++;
	}
	return true;
}

void* find_negative(void* accum, void* x)
//@requires x == NULL || \hastag(int*, x);
//@requires accum == NULL || \hastag(int*, accum);
//@ensures \result == NULL || \hastag(int*, \result);
{
	if (accum != NULL)
		return accum;
	else if (x != NULL && *((int*)x) < 0)
		return x;
	else
		return NULL;
}

void* copy(void* Q, void* elem)
//@requires \hastag(queue_t, Q);
//@ensures \hastag(queue_t, \result);
{
	enq((queue_t)Q, elem);
	return Q;
}

void* insert(void* x, void* y)
//@requires x != NULL && y != NULL;
//@requires \hastag(int*, x) && \hastag(int*, y);
{
	int intx = *((int*)x);
	int inty = *((int*)y);
	if (intx < inty) {
		int* x_int_ptr = (int*)x;
		int* y_int_ptr = (int*)y;
		*x_int_ptr = inty;
		*y_int_ptr = intx;
	}
	return x;
}
