#use <conio>
#use <string>
#use <util>

int main() {
	rope_t segment0 = rope_new("sometimes ");
	rope_t segment1 = rope_new("I ");
	rope_t segment2 = rope_new("wish ");
	rope_t segment3 = rope_new("I ");
	rope_t segment4 = rope_new("were ");
	rope_t segment5 = rope_new("an ");
	rope_t segment6 = rope_new("angel, ");
	rope_t segment7 = rope_new("sometimes ");
	rope_t segment8 = rope_new("I ");
	rope_t segment9 = rope_new("wish ");
	rope_t segment10 = rope_new("I ");
	rope_t segment11 = rope_new("were ");
	rope_t segment12 = rope_new("you.");
	
	rope_t combined0 = rope_join(segment0, segment1);
	rope_t combined1 = rope_join(segment2, segment3);
	rope_t combined2 = rope_join(segment4, segment5);
	rope_t combined3 = rope_join(segment6, segment7);
	rope_t combined4 = rope_join(segment8, segment9);
	rope_t combined5 = rope_join(segment10, segment11);
	
	rope_t combined6 = rope_join(combined0, combined1);
	rope_t combined7 = rope_join(combined2, combined3);
	rope_t combined8 = rope_join(combined4, combined5);
	
	rope_t combined9 = rope_join(combined6, combined7);
	rope_t combined10 = rope_join(combined8, segment12);
	
	rope_t final = rope_join(combined9, combined10);
	string str = "sometimes I wish I were an angel, sometimes I wish I were you";
	
	for (int i = 0; i < string_length(str); i++)
		assert(string_charat(str, i) == rope_charat(final, i));
	
	rope_t sub1 = rope_sub(final, 5, 30);
	string substr1 = string_sub(str, 5, 30);
	
	for (int i = 0; i < string_length(substr1); i++)
		assert(string_charat(substr1, i) == rope_charat(sub1, i));
	
	int arr_size = 1;
	rope_t[] A = alloc_array(rope_t, arr_size);
	A[0] = final;
	rope_reduce(A, arr_size);
	
	for (int i = 0; i < string_length(str); i++)
		assert(string_charat(str, i) == rope_charat(final, i));
	
	// JOIN
	
	rope_t happ = rope_new("happ");
	rope_t y_birth = rope_new("y birth");
	rope_t happy_birth = rope_join(happ, y_birth);
	assert(happy_birth->left == happ);
	assert(happy_birth->right == y_birth);
	
	rope_t day = rope_new("day!");
	rope_t happy_birthday = rope_join(happy_birth, day);
	assert(happy_birthday->left == happy_birth);
	assert(happy_birthday->left->left == happ);
	assert(happy_birthday->left->right == y_birth);
	assert(happy_birthday->right == day);
	
	for (int i = 0; i < rope_length(happy_birthday); i++)
		assert(string_charat("happy birthday!", i) == rope_charat(happy_birthday, i));
	
	rope_t t = rope_new("t");
	rope_t otally = rope_new("otally");
	rope_t totally = rope_join(t, otally);
	assert(totally->left == t);
	assert(totally->right == otally);
	
	rope_t efficien = rope_new("efficien");
	rope_t t2 = rope_new("t");
	rope_t efficient = rope_join(efficien, t2);
	assert(efficient->left == efficien);
	assert(efficient->right == t2);
	
	rope_t totallyefficient = rope_join(totally, efficient);
	assert(totallyefficient->left == totally);
	assert(totallyefficient->left->left == t);
	assert(totallyefficient->left->right == otally);
	assert(totallyefficient->right == efficient);
	
	// SUB
	
	rope_t otallyefficient = rope_sub(totallyefficient, 1, 16);
	for (int i = 0; i < rope_length(otallyefficient); i++)
		assert(string_charat("otallyefficient", i) == rope_charat(otallyefficient, i));
	assert(otallyefficient->left == otally);
	assert(otallyefficient->right == efficient);
	
	rope_t otallyeffi = rope_sub(totallyefficient, 1, 11);
	for (int i = 0; i < rope_length(otallyeffi); i++)
		assert(string_charat("otallyeffi", i) == rope_charat(otallyeffi, i));
	assert(otallyeffi->left == otally);
	
	rope_t tallyeffi = rope_sub(totallyefficient, 2, 11);
	for (int i = 0; i < rope_length(tallyeffi); i++)
		assert(string_charat("tallyeffi", i) == rope_charat(tallyeffi, i));
	
	// REDUCE
	
	rope_t ab = rope_new("ab");
	rope_t ra = rope_new("ra");
	rope_t abra = rope_join(ab, ra);
	assert(abra->left == ab);
	rope_t cad = rope_new("cad");
	rope_t ab2 = rope_new("ab");
	rope_t cadab = rope_join(cad, ab2);
	rope_t ra2 = rope_new("ra");
	rope_t cadabra = rope_join(cadab, ra2);
	assert(cadabra->left->right == ab2);
	rope_t abracadabra = rope_join(abra, cadabra);
	A[0] = abracadabra;
	rope_reduce(A, arr_size);
	assert(abracadabra != NULL && abracadabra->left != NULL && abracadabra->right != NULL && abracadabra->right->left != NULL);
	assert(abracadabra->left->left == abracadabra->right->left->right);
	assert(abracadabra->left->right == abracadabra->right->right);
	
	for (int i = 0; i < rope_length(abracadabra); i++)
		assert(string_charat("abracadabra", i) == rope_charat(abracadabra, i));
	
	rope_t abr = rope_new("abr");
	rope_t a = rope_new("a");
	rope_t abra2 = rope_join(abr, a);
	cadabra = rope_join(cad, abra);
	abracadabra = rope_join(abra2, cadabra);
	A[0] = abracadabra;
	rope_reduce(A, arr_size);
	assert(abracadabra != NULL && abracadabra->right != NULL);
	assert(abracadabra->left == abracadabra->right->right);
	
	for (int i = 0; i < rope_length(abracadabra); i++)
		assert(string_charat("abracadabra", i) == rope_charat(abracadabra, i));
	
	arr_size = 3;
	rope_t[] B = alloc_array(rope_t, arr_size);
	
	rope_t br = rope_new("br");
	abr = rope_join(a, br);
	rope_t a2 = rope_new("a");
	rope_t abr2 = rope_new("abr");
	abra = rope_join(abr2, a2);
	rope_t a3 = rope_new("a");
	rope_t br2 = rope_new("br");
	rope_t a4 = rope_new("a");
	rope_t bra = rope_join(br2, a4);
	abra2 = rope_join(a4, bra);
	B[0] = abr2;
	B[1] = abra;
	B[2] = abra2;
	rope_reduce(B, arr_size);
	
	assert(string_compare(rope_tostring(B[0]), "abr") == 0);
	assert(string_compare(rope_tostring(B[1]), "abra") == 0);
	assert(string_compare(rope_tostring(B[2]), "abra") == 0);
	
	assert(B[1] == B[2] && B[0] != NULL && B[1] != NULL);
	assert(B[0] == B[1]->left);
	
	rope_t a1 = rope_new("a");
	a2 = rope_new("a");
	a3 = rope_new("a");
	a4 = rope_new("a");
	rope_t a5 = rope_new("a");
	rope_t a6 = rope_new("a");
	rope_t a7 = rope_new("a");
	rope_t a8 = rope_new("a");
	rope_t a9 = rope_new("a");
	rope_t a10 = rope_new("a");
	rope_t a11 = rope_new("a");
	rope_t a12 = rope_new("a");
	rope_t a13 = rope_new("a");
	
	rope_t aaaaa = rope_join(rope_join(rope_join(rope_join(a1, a2), a3), a4), a5);
	rope_t aaaaaaaa = rope_join(rope_join(rope_join(a6, a7), rope_join(a8, a9)), rope_join(rope_join(a10, a11), rope_join(a12, a13)));
	arr_size = 2;
	rope_t[] C = alloc_array(rope_t, arr_size);
	C[0] = aaaaa;
	C[1] = aaaaaaaa;
	rope_reduce(C, arr_size);
	assert(string_compare(rope_tostring(C[0]), "aaaaa") == 0);
	assert(string_compare(rope_tostring(C[1]), "aaaaaaaa") == 0);
	assert(C[1]->left == C[1]->right);
	assert(C[1]->left == C[0]->left);
	assert(C[0]->left->left->left->left == C[0]->right);
	assert(C[0]->left->left->left->left == C[0]->left->right);
	assert(C[0]->left->left->left->left == C[0]->left->left->right);
	assert(C[0]->left->left->left->left == C[0]->left->left->left->right);
	
	return 0;
}
