/*
 * Ropes
 *
 * 15-122 Principles of Imperative Computation
 */

#use <conio>
#use <string>
#use <util>

/************************************/
/* Interface (leave this in place!) */
/************************************/

// typedef _______ rope_t;
typedef struct rope_node* rope_t;

int rope_length(rope_t R)
	/*@ensures \result >= 0; @*/ ;
rope_t rope_new(string s)
	/*@ensures rope_length(\result) == string_length(s); @*/ ;
rope_t rope_join(rope_t R, rope_t S)
	/*@requires rope_length(R) <= int_max() - rope_length(S); @*/
	/*@ensures rope_length(\result) == rope_length(R) + rope_length(S); @*/ ;
string rope_tostring(rope_t R)
	/*@ensures string_length(\result) == rope_length(R); @*/ ;
char rope_charat(rope_t R, int i)
	/*@requires 0 <= i && i < rope_length(R); @*/ ;
rope_t rope_sub(rope_t R, int lo, int hi)
	/*@requires 0 <= lo && lo <= hi && hi <= rope_length(R); @*/
	/*@ensures rope_length(\result) == hi - lo; @*/ ;
void rope_reduce(rope_t[] A, int n)
	/*@requires n == \length(A); @*/ ;

/***********************************/
/* Implementation (edit this part) */
/***********************************/

typedef struct rope_node rope;
struct rope_node {
	int len;
	rope* left;
	rope* right;
	string data;
};

bool is_rope(rope* R) {
	return R == NULL || (R->left == NULL && R->right == NULL && R->len > 0 && R->len == string_length(R->data)) || (R->left != NULL && R->right != NULL && R->len > 0 && R->len == R->left->len + R->right->len && is_rope(R->left) && is_rope(R->right));
}

rope_t rope_new(string str)
//@requires string_length(str) >= 0;
//@ensures is_rope(\result) && rope_length(\result) == string_length(str);
{
	rope_t R = alloc(rope);
	R->data = str;
	R->len = string_length(str);
	R->left = NULL;
	R->right = NULL;
	return R;
}

int rope_length(rope_t R)
//@requires is_rope(R);
//@ensures \result >= 0 && is_rope(R);
{
	if (R == NULL)
		return 0;
	else
		return R->len;
}

rope_t rope_join(rope_t R, rope_t S)
//@requires is_rope(R) && is_rope(S) && rope_length(R) < int_max() - rope_length(S);
//@ensures is_rope(\result) && rope_length(\result) == rope_length(R) + rope_length(S);
{
	rope_t out = alloc(rope);
	out->left = R;
	out->right = S;
	out->len = rope_length(R) + rope_length(S);
	return out;
}

string rope_tostring(rope_t R)
//@requires is_rope(R);
//@ensures string_length(\result) == rope_length(R);
{
	if (R == NULL)
		return "";
	else if (R->left == NULL && R->right == NULL && R->len == string_length(R->data))
		return R->data;
	else
		return string_join(rope_tostring(R->left), rope_tostring(R->right));
}

char rope_charat(rope_t R, int i)
//@requires is_rope(R);
//@requires 0 <= i && i < rope_length(R);
{
	if (R->left == NULL && R->right == NULL && R->len == string_length(R->data))
		return string_charat(R->data, i);
	else if (i < rope_length(R->left))
		return rope_charat(R->left, i);
	else
		return rope_charat(R->right, i - rope_length(R->left));
}

rope_t rope_sub(rope_t R, int lo, int hi)
//@requires 0 <= lo && lo <= hi && hi <= rope_length(R);
//@ensures rope_length(\result) == hi - lo;
{
	if (R == NULL)
		return NULL;
	
	else if (lo == 0 && hi == rope_length(R))
		return R;
	
	else if (R->left == NULL && R->right == NULL && R->len == string_length(R->data))
		return rope_new(string_sub(R->data, lo, hi));
	
	else if (hi <= rope_length(R->left))
		return rope_sub(R->left, lo, hi);
	
	else if (lo >= rope_length(R->left))
		return rope_sub(R->right, lo - rope_length(R->left), hi - rope_length(R->left));
	
	else
		return rope_join(rope_sub(R->left, lo, rope_length(R->left)), rope_sub(R->right, 0, hi - rope_length(R->left)));
}

int hash(void* in)
//@requires \hastag(rope_t, in);
//@requires is_rope((rope_t)in);
{
	rope_t R = (rope_t)in;
	int out = 0;
	for (int i = 0; i < rope_length(R); i++)
		out = (out * 0xE582E1 + 0xD4A1A9) % 0xF61E8F + char_ord(rope_charat(R, i));
	return out;
}

bool equiv(void* in0, void* in1)
//@requires \hastag(rope_t, in0) && \hastag(rope_t, in1);
//@requires is_rope((rope_t)in0) && is_rope((rope_t)in1);
{
	rope_t A = (rope_t)in0;
	rope_t B = (rope_t)in1;
	if (rope_length(A) != rope_length(B))
		return false;
	for (int i = 0; i < rope_length(A); i++)
		if (rope_charat(A, i) != rope_charat(B, i))
			return false;
	return true;
}

rope_t reduce(hdict_t D, rope_t R)
//@requires is_rope(R);
{
	rope_t out = R;
	if (hdict_lookup(D, (void*)R) == NULL) {
		hdict_insert(D, (void*)R, (void*)R);
	}
	else {
		void* search_result = hdict_lookup(D, (void*)R);
		//@assert \hastag(rope_t, search_result);
		out = (rope_t)search_result;
	}
	if (R->left != NULL) R->left = reduce(D, R->left);
	if (R->right != NULL) R->right = reduce(D, R->right);
	return out;
}

void rope_reduce(rope_t[] A, int n)
//@requires \length(A) == n;
{
	hdict_t D = hdict_new(n, &equiv, &hash);
	for (int i = 0; i < n; i++) {
		A[i] = reduce(D, A[i]);
	}
}
