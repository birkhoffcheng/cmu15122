#use <conio>
#use <util>
int main() {
  
  int correct_miss_size;
  int textsz;
  string[] text;
  string[] misspelled;
  string[] correct;
  //string[] dict = string_bundle_array(read_words("texts/dict.txt"));
  //int dictsz = string_bundle_length(read_words("texts/dict.txt"));
  string[] dict = parse_tokens("ability camera disk door error format fun human image only open phone protocol safety save shoes spell test text zoo");
  int dictsz = 20;
  string[] mydict = parse_tokens("a b c d e f g");
  int mydictsz = 7;
  
  assert(check_word(dict, dictsz, "camera"));
  assert(check_word(dict, dictsz, "shoes"));
  assert(!check_word(dict, dictsz, "damnc0"));
  assert(!check_word(dict, dictsz, "ptrisgood"));
  
  assert(check_word(mydict, mydictsz, "a"));
  assert(check_word(mydict, mydictsz, "b"));
  assert(check_word(mydict, mydictsz, "c"));
  assert(check_word(mydict, mydictsz, "d"));
  assert(check_word(mydict, mydictsz, "e"));
  assert(check_word(mydict, mydictsz, "f"));
  assert(check_word(mydict, mydictsz, "g"));
  
  assert(!check_word(mydict, mydictsz, "h"));
  assert(!check_word(mydict, mydictsz, "i"));
  assert(!check_word(mydict, mydictsz, "j"));
  assert(!check_word(mydict, mydictsz, "k"));
  assert(!check_word(mydict, mydictsz, "l"));
  assert(!check_word(mydict, mydictsz, "m"));
  assert(!check_word(mydict, mydictsz, "n"));
  
  assert(!check_word(mydict, mydictsz, "A"));
  assert(!check_word(mydict, mydictsz, "B"));
  assert(!check_word(mydict, mydictsz, "C"));
  assert(!check_word(mydict, mydictsz, "D"));
  assert(!check_word(mydict, mydictsz, "E"));
  assert(!check_word(mydict, mydictsz, "F"));
  assert(!check_word(mydict, mydictsz, "G"));
  
  textsz = 7;
  correct_miss_size = 3;
  text = parse_tokens("awfrl error witph only correrct correrct ability");
  correct = parse_tokens("awfrl correrct witph");
  misspelled = alloc_array(string, textsz);
  assert(check_text_better(dict, dictsz, text, textsz, misspelled) == correct_miss_size);
  for (int i = 0; i < correct_miss_size; i++) {
    assert(string_compare(misspelled[i], correct[i]) == 0);
  }
  
  textsz = 9;
  correct_miss_size = 5;
  text = parse_tokens("ohhohh ohhohh opddh oops0s iqpwe cxas fun ohhohh protocol");
  correct = parse_tokens("cxas iqpwe ohhohh oops0s opddh");
  misspelled = alloc_array(string, textsz);
  assert(check_text_better(dict, dictsz, text, textsz, misspelled) == correct_miss_size);
  for (int i = 0; i < correct_miss_size; i++) {
    assert(string_compare(misspelled[i], correct[i]) == 0);
  }
  
  textsz = 8;
  correct_miss_size = 0;
  text = parse_tokens("format text spell test open save test format");
  correct = parse_tokens("");
  misspelled = alloc_array(string, textsz);
  assert(check_text_better(dict, dictsz, text, textsz, misspelled) == correct_miss_size);
  for (int i = 0; i < correct_miss_size; i++) {
    assert(string_compare(misspelled[i], correct[i]) == 0);
  }
  
  textsz = 10;
  correct_miss_size = 2;
  text = parse_tokens("phone text human door eers eers safety pionerer disk image");
  correct = parse_tokens("eers pionerer");
  misspelled = alloc_array(string, textsz);
  assert(check_text_better(dict, dictsz, text, textsz, misspelled) == correct_miss_size);
  for (int i = 0; i < correct_miss_size; i++) {
    assert(string_compare(misspelled[i], correct[i]) == 0);
  }
  
  return 0;
}
