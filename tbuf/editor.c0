/*
 * Augment doubly linked lists with row and column information.
 *
 * 15-122 Principles of Imperative Computation */

/*** Interface ***/

typedef struct editor_header editor;
struct editor_header {
	tbuf* buffer;
	int row;
	int col;
};

bool is_editor(editor* E);
editor* editor_new();	/* Creates a new, empty text buffer */
void editor_forward(editor* E);	/* Moves the cursor forward (right) */
void editor_backward(editor* E);	/* Moves the cursor backward (left) */
void editor_insert(editor* E, char c);	/* Insert a character before cursor */
void editor_delete(editor* E);	/* Remove character before cursor */
void editor_up(editor* E);	/* Moves the cursor up */
void editor_down(editor* E);	/* Moves the cursor down */

/*** Implementation ***/

bool is_editor(editor* E)
{
	return E != NULL && is_tbuf(E->buffer) && E->row > 0 && E->row == tbuf_row(E->buffer) && E->col >= 0 && E->col == tbuf_col(E->buffer);
}

editor* editor_new()
//ensures is_editor(\result);
{
	editor* new = alloc(editor);
	new->row = 1;
	new->col = 0;
	new->buffer = tbuf_new();
	return new;
}

void editor_forward(editor* E)
//@requires is_editor(E);
//@ensures is_editor(E);
{
	if (tbuf_at_right(E->buffer))
		return;
	if (E->buffer->cursor->data == '\n') {
		E->row++;
		E->col = 0;
	}
	else {
		E->col++;
	}
	tbuf_forward(E->buffer);
}

void editor_backward(editor* E)
//@requires is_editor(E);
//@ensures is_editor(E);
{
	if (tbuf_at_left(E->buffer))
		return;
	tbuf_backward(E->buffer);
	if (E->buffer->cursor->data == '\n') {
		if (E->row > 1)
			E->row--;
		E->col = tbuf_col(E->buffer);
	}
	else {
		E->col--;
	}
}

void editor_insert(editor* E, char c)
//@requires is_editor(E);
//@ensures is_editor(E);
{
	tbuf_insert(E->buffer, c);
	if (c == '\n') {
		E->row++;
		E->col = 0;
	}
	else {
		E->col++;
	}
}

void editor_delete(editor* E)
//@requires is_editor(E);
//@ensures is_editor(E);
{
	if (tbuf_at_left(E->buffer))
		return;
	char c = tbuf_delete(E->buffer);
	if (c == '\n') {
		if (E->row > 1)
			E->row--;
		E->col = tbuf_col(E->buffer);
	}
	else {
		E->col--;
	}
}

void editor_up(editor* E)
//@requires is_editor(E);
//@ensures is_editor(E);
{
	
	if (tbuf_row(E->buffer) == 1)
		return;

	int current_col = tbuf_col(E->buffer);
	editor_backward(E);
	while (E->buffer->cursor->data != '\n')
		editor_backward(E);
	
	int prev_line_length = tbuf_col(E->buffer);
	if (current_col < prev_line_length)
		for (int i = 0; i < prev_line_length - current_col; i++)
			editor_backward(E);
}

void editor_down(editor* E)
//@requires is_editor(E);
//@ensures is_editor(E);
{
	int current_col = tbuf_col(E->buffer);
	int ctr = 0;
	while (E->buffer->cursor->data != '\n' && !tbuf_at_right(E->buffer)) {
		editor_forward(E);
		ctr++;
	}
	if (tbuf_at_right(E->buffer))
		for (int i = 0; i < ctr; i++)
			editor_backward(E);
	else {
		editor_forward(E);
		for (int i = 0; i < current_col && E->buffer->cursor->data != '\n'; i++)
			editor_forward(E);
	}
}

